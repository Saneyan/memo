# Redis

## 概要

### 歴史
* 2009年 Salvatore Sanfilippo により開発

### 開発言語
* ANSI C

### 動作
* シングルスレッド動作
* すべてのデータセットをメモリ内に読み込む
* 複数の操作を1回で実行することによりパフォーマンスを向上させている
* メモリオーバー時の挙動は`maxmemory-policy(policy)`により振る舞いを選択
  * `volatile-lrc`: LRU アルゴリズムに従い、期限切れになったキーを削除
  * `allkeys-lrc`: LRC アルゴリズムに従い、どれかのキーを削除
  * `volatile-random`: 期限切れになったセットの中から、ランダムにキーを削除
  * `allkeys-random`: どれかのキーをランダムに削除
  * `volatile-ttl`: 一番期限に近いキーから削除
* メモリを確保できないときは書き込みエラーとなる


#### LRU
Least Recently Used の略。
1. エントリごとに「いつ使用したか」を示すデータを保存する
2. エントリを使用するごとにデータが更新される
3. 最も使用されていないエントリを検出する

擬似 LRU (1~3を一定のタイミングでリセット、検出)
1. Dirty flag のリセット
2. エントリを使用するごとに dirty flag をセットする
3. 最近しようされていないエントリを検出する

### DB
* ID による複数のデータベース管理が可能
* 各データベースにはそれぞれのキーと値を保持することができる
* 5種類の型をサポート

### 型
#### 文字列型
* 最大1GBまで扱うことができる。
* バイナリセーフ


#### リスト型
* リストの要素数の最大値は 2^32 - 1
* `LPUSH`: 新しい要素をリストの先頭に追加
* `RPUSH`: 新しい要素をリストの末尾に追加

```
LPUSH list a # now the list is "a"
LPUSH list b # now the list is "b", "a"
RPUSH list c # now the list is "b", "a", "c"
```

#### セット型
* 文字列型の順不同の集合
* セットの要素数の最大値は 2^32 - 1
* 同じメンバを重複して登録することはできない
* 集合演算用コマンドで操作する
  * `SINTER`: 積集合
  * `SUNION`: 和集合
  * `sDIFF`: 差集合

#### ソート済みセット型
* 文字列型の集合
* セットの要素数の最大値は 2^32 - 1
* スコアの値でソートされている
* 同じスコアの場合はランダム順位となる
* 同じメンバを重複して登録することはできない

#### ハッシュ型
* 順番がない文字列型のフィールドと値のマップ
* フィールド値での検索が可能
* 値を指定しての検索不可能